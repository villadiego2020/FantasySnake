name: Build Unity Server

on: 
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  buildServer:
    name: Build Server
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Cache Library Files
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-Server-${{ github.run_id }}
          restore-keys: |
            Library-Server-

      - name: Build Unity Server
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          unityVersion: ${{ secrets.UNITY_VERSION }}
          targetPlatform: StandaloneWindows64
          buildMethod: "BuildScript.BuildServer"
          buildsPath: "Builds"

      - name: Debug - List Build Files
        shell: pwsh
        run: |
          Write-Host "üîç Checking Builds directory..."
          Get-ChildItem -Path Builds -Recurse

      - name: Remove Old Files
        shell: pwsh
        run: |
          $ServerZip = "$(Get-Location)\Builds\Server.zip"
          if (Test-Path $ServerZip) { Remove-Item $ServerZip -Force }

      - name: Compress Build Files
        shell: pwsh
        run: |
          $ServerFolder = "$(Get-Location)\Builds\Windows\Server"  # ‡πÅ‡∏Å‡πâ Path ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà Unity ‡∏™‡∏£‡πâ‡∏≤‡∏á
          $ServerZip = "$(Get-Location)\Builds\Server.zip"
          
          if (Test-Path $ServerFolder) { 
              Compress-Archive -Path $ServerFolder -DestinationPath $ServerZip -Force
              Write-Host "‚úÖ Server.zip created successfully!"
          } else {
              Write-Host "‚ùå ERROR: Server build folder not found!"
          }

      - name: Debug - Check ZIP File
        shell: pwsh
        run: |
          if (Test-Path "$(Get-Location)\Builds\Server.zip") { 
              Write-Host "‚úÖ Server.zip found!" 
          } else { 
              Write-Host "‚ùå ERROR: Server.zip not found!"
              Get-ChildItem -Path $(Get-Location)\Builds -Recurse
          }

      - name: Upload Build to GitHub Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Build-Server
          path: ${{ github.workspace }}\Builds\Server.zip
          if-no-files-found: error  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå ‡πÉ‡∏´‡πâ workflow ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
          
  deployToPlayFab:
    name: Deploy Server to PlayFab
    needs: buildServer
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Server Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: Build-Server
          path: Builds/

      - name: List Downloaded Files
        shell: pwsh
        run: |
          Write-Host "üìÇ Checking downloaded files..."
          Get-ChildItem -Path Builds/ -Recurse

      - name: Upload Server Build to PlayFab
        run: |
          curl -X POST "https://titleId.playfabapi.com/MultiplayerServer/UploadServerBuild" `
            -H "X-SecretKey: ${{ secrets.PLAYFAB_SECRET_KEY }}" `
            -H "Content-Type: application/json" `
            -d '{
              "BuildName": "Server-Build-${{ github.run_number }}",
              "BuildVersion": "1.0.${{ github.run_number }}",
              "ContainerFlavor": "ManagedWindowsServerCore",
              "AssetFileName": "Server.zip",
              "AssetFileSize": 1000000
            }'

      - name: Deploy Server Build on PlayFab
        run: |
          curl -X POST "https://titleId.playfabapi.com/MultiplayerServer/DeployServerBuild" `
            -H "X-SecretKey: ${{ secrets.PLAYFAB_SECRET_KEY }}" `
            -H "Content-Type: application/json" `
            -d '{
              "BuildName": "Server-Build-${{ github.run_number }}",
              "Region": "EastUs",
              "MaxServers": 5
            }'
            
  release:
      name: Create GitHub Release
      needs: buildServer
      runs-on: windows-latest
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4
  
        - name: Download Build Artifacts (Server)
          uses: actions/download-artifact@v4
          with:
            name: Build-Server
            path: Builds/
  
        - name: List Downloaded Files
          shell: pwsh
          run: |
            Write-Host "üìÇ Checking downloaded files..."
            Get-ChildItem -Path Builds/ -Recurse
  
        - name: Create GitHub Release
          uses: softprops/action-gh-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          with:
            tag_name: v1.0.${{ github.run_number }}
            name: "Release v1.0.${{ github.run_number }}"
            body: |
              **New Release: v1.0.${{ github.run_number }}**
              - **Server**: [Download](https://github.com/${{ github.repository }}/releases/download/v1.0.${{ github.run_number }}/Server.zip)
              - Deploying Server 
            draft: false
            prerelease: false
            files: |
              Builds/Server.zip
  
