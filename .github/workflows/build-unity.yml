name: Build Unity Game

on: 
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  buildForAll:
    name: Build for ${{ matrix.target }}
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        target: [Client, Server]

    steps:
      - name: üõ†Ô∏è Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: üîç Debug ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏° Build (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå)
        run: |
          if (Test-Path "Builds/Windows") { Get-ChildItem -Path Builds/Windows -Recurse } 
          else { Write-Host "‚ö†Ô∏è Builds/Windows folder ‡πÑ‡∏°‡πà‡∏û‡∏ö!" }
        shell: powershell

      - name: üéÆ Build Unity Game
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          unityVersion: ${{ secrets.UNITY_VERSION }}
          targetPlatform: StandaloneWindows64
          buildMethod: "BuildScript.Build${{ matrix.target }}"
        continue-on-error: true

      - name: üîé Debug Unity Build Logs (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Unity Build)
        run: |
          if (Test-Path "Logs/UnityBuild.log") {
              Get-Content Logs/UnityBuild.log -Tail 50
          } else {
              Write-Host "‚ö†Ô∏è Unity Build Log Not Found!"
          }
        shell: powershell
        continue-on-error: true

      - name: üîç Debug ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å Build
        run: Get-ChildItem -Path Builds/Windows -Recurse
        shell: powershell
        continue-on-error: true

      - name: üì¶ Compress Build Files (‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î Client ‡πÅ‡∏•‡∏∞ Server)
        run: |
          if (Test-Path "Builds/Windows/Client") {
              Compress-Archive -Path Builds/Windows/Client -DestinationPath Builds/Windows/Client.zip -Force
              Write-Host "‚úÖ Client.zip ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß"
          } else {
              Write-Host "‚ùå Client folder ‡πÑ‡∏°‡πà‡∏û‡∏ö! Build ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"
          }

          if (Test-Path "Builds/Windows/Server") {
              Compress-Archive -Path Builds/Windows/Server -DestinationPath Builds/Windows/Server.zip -Force
              Write-Host "‚úÖ Server.zip ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß"
          } else {
              Write-Host "‚ùå Server folder ‡πÑ‡∏°‡πà‡∏û‡∏ö! Build ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"
          }
        shell: powershell

      - name: üîç Verify Build Files Exist (‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î)
        run: |
          if (!(Test-Path "Builds/Windows/Client.zip")) { 
              Write-Host "‚ùå Client build not found! ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Unity Logs"; 
              exit 1 
          }
          if (!(Test-Path "Builds/Windows/Server.zip")) { 
              Write-Host "‚ùå Server build not found! ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Unity Logs"; 
              exit 1 
          }
        shell: powershell

      - name: ‚òÅÔ∏è Upload Build to GitHub Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Build-${{ matrix.target }}
          path: Builds/Windows/${{ matrix.target }}.zip

  release:
    name: Create GitHub Release
    needs: buildForAll
    runs-on: windows-latest

    steps:
      - name: üõ†Ô∏è Checkout Repository
        uses: actions/checkout@v4

      - name: üì• Download Build Artifacts (Client)
        uses: actions/download-artifact@v4
        with:
          name: Build-Client
          path: Builds/Windows/

      - name: üì• Download Build Artifacts (Server)
        uses: actions/download-artifact@v4
        with:
          name: Build-Server
          path: Builds/Windows/

      - name: üîç Verify Downloaded Files
        run: |
          if (!(Test-Path "Builds/Windows/Client.zip")) { Write-Host "‚ùå Client build not found after download!"; exit 1 }
          if (!(Test-Path "Builds/Windows/Server.zip")) { Write-Host "‚ùå Server build not found after download!"; exit 1 }
        shell: powershell

      - name: üöÄ Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        with:
          tag_name: v1.0.${{ github.run_number }}
          name: "Release v1.0.${{ github.run_number }}"
          body: |
            üéâ **New Release: v1.0.${{ github.run_number }}**
            - üñ•Ô∏è **Client**: [Download](https://github.com/${{ github.repository }}/releases/download/v1.0.${{ github.run_number }}/Client.zip)
            - üñ•Ô∏è **Server**: [Download](https://github.com/${{ github.repository }}/releases/download/v1.0.${{ github.run_number }}/Server.zip)
          draft: false
          prerelease: false
          files: |
            Builds/Windows/Client.zip
            Builds/Windows/Server.zip
