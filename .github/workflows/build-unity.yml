name: Build Unity Game

on: 
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  buildForAll:
    name: Build for ${{ matrix.target }}
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        target: [Client, Server]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Cache Library Files
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ matrix.target }}-${{ github.run_id }}
          restore-keys: |
            Library-${{ matrix.target }}-

      - name: Build Unity Game
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          unityVersion: ${{ secrets.UNITY_VERSION }}
          targetPlatform: StandaloneWindows64
          buildMethod: "BuildScript.Build${{ matrix.target }}"
          buildsPath: "Builds"

      - name: Debug - List Build Files
        shell: pwsh
        run: |
          Write-Host "üîç Checking Builds directory..."
          Get-ChildItem -Path Builds -Recurse

      - name: Remove Old Files
        shell: pwsh
        run: |
          $zipFile = "$(Get-Location)\Builds\${{ matrix.target }}.zip"
          if (Test-Path $zipFile) { Remove-Item $zipFile -Force }

      - name: Compress Build Files
        shell: pwsh
        run: |
          $buildFolder = "$(Get-Location)\Builds\Windows\${{ matrix.target }}"
          $zipFile = "$(Get-Location)\Builds\${{ matrix.target }}.zip"

          if (Test-Path $buildFolder) { 
              Compress-Archive -Path $buildFolder -DestinationPath $zipFile -Force
              Write-Host "‚úÖ ${{ matrix.target }}.zip created successfully!"
          } else {
              Write-Host "‚ùå ERROR: ${{ matrix.target }} build folder not found!"
          }

      - name: Debug - Check ZIP File
        shell: pwsh
        run: |
          if (Test-Path "$(Get-Location)\Builds\${{ matrix.target }}.zip") { 
              Write-Host "‚úÖ ${{ matrix.target }}.zip found!" 
          } else { 
              Write-Host "‚ùå ERROR: ${{ matrix.target }}.zip not found!"
              Get-ChildItem -Path $(Get-Location)\Builds -Recurse
          }

      - name: Upload Build to GitHub Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Build-${{ matrix.target }}
          path: ${{ github.workspace }}\Builds\${{ matrix.target }}.zip
          if-no-files-found: error  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå ‡πÉ‡∏´‡πâ workflow ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß

  release:
    name: Create GitHub Release
    needs: buildForAll
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Build Artifacts (Client)
        uses: actions/download-artifact@v4
        with:
          name: Build-Client
          path: Builds/

      - name: Download Build Artifacts (Server)
        uses: actions/download-artifact@v4
        with:
          name: Build-Server
          path: Builds/

      - name: List Downloaded Files
        shell: pwsh
        run: |
          Write-Host "üìÇ Checking downloaded files..."
          Get-ChildItem -Path Builds/ -Recurse

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        with:
          tag_name: v1.0.${{ github.run_number }}
          name: "Release v1.0.${{ github.run_number }}"
          body: |
            üéâ **New Release: v1.0.${{ github.run_number }}**
            - üñ•Ô∏è **Client**: [Download](https://github.com/${{ github.repository }}/releases/download/v1.0.${{ github.run_number }}/Client.zip)
            - üñ•Ô∏è **Server**: [Download](https://github.com/${{ github.repository }}/releases/download/v1.0.${{ github.run_number }}/Server.zip)
          draft: false
          prerelease: false
          files: |
            Builds/Client.zip
            Builds/Server.zip
